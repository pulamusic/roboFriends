{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","containers/App.js","registerServiceWorker.js","index.js"],"names":["Card","props","className","alt","src","id","name","email","CardList","robots","cardsArray","map","user","i","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","style","overflowY","border","height","children","App","onSearchChange","event","setState","target","value","state","fetch","then","response","json","users","this","filteredRobots","filter","robot","toLowerCase","includes","length","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.07bd4d09.chunk.js","sourcesContent":["import React from 'react'\n\nconst Card = (props) => {\n  return (\n    <div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\n      <img alt='robots' src={`https://robohash.org/${props.id}?200x200`} />\n      <div>\n        <h2>{props.name}</h2>\n        <p>{props.email}</p>\n      </div>\n    </div>\n  )\n}\n\nexport default Card\n","import React from 'react'\nimport Card from './Card'\n\nconst CardList = ({ robots }) => {\n  const cardsArray = robots.map((user, i) => {\n    return (\n      <Card\n        key={i}\n        id={robots[i].id}\n        name={robots[i].name}\n        email={robots[i].email}\n      />\n    )\n  })\n\n  return (\n    <div>\n      {cardsArray}\n    </div>\n  )\n}\n\nexport default CardList\n","import React from 'react'\n\nconst SearchBox = ({ searchfield, searchChange }) => {\n  return (\n    <div className='pa2'>\n      <input\n        className='pa3 ba b--green bg-lightest-blue'\n        type='search'\n        placeholder='search robots'\n        onChange={searchChange}\n      />\n    </div>\n  )\n}\n\nexport default SearchBox\n","import React from 'react'\n\n// using `this.children` allows us to create a component, like <Scroll></Scroll> (see App.js), that can wrap around HTML-like React elements.\nconst Scroll = (props) => {\n  // console.log(props)\n  return (\n    <div style={{ overflowY: 'scroll', border: '5px solid black', height: '850px' }}>\n      {props.children}\n    </div>\n  )\n}\n\nexport default Scroll\n","import React, { Component } from 'react'\nimport CardList from '../components/CardList'\nimport SearchBox from '../components/SearchBox'\n// now receiving info from the jsonplaceholder API service, so I no longer need the robots.js file\n// import { robots } from './robots'\nimport Scroll from '../components/Scroll'\nimport './App.css'\n\nclass App extends Component {\n  constructor () {\n    super()\n    this.state = {\n      robots: [],\n      searchfield: ''\n    }\n  }\n\n  // reconfigured the robots file (somehow) using the jasonplaceholder fake API service. Didn't understand this part of the tutorial, but check out the json code output by the url below. Cool stuff...I think.\n  // NOTE: This is using the new `fetch().then(response => response.json())` API AJAX function rather than the older GET json() mess.\n  componentDidMount () {\n    fetch('https://jsonplaceholder.typicode.com/users')\n      .then(response => response.json())\n      .then(users => this.setState({ robots: users }))\n  }\n\n  onSearchChange = (event) => {\n    this.setState({ searchfield: event.target.value })\n  }\n\n  render () {\n    const { robots, searchfield } = this.state\n\n    const filteredRobots = robots.filter(robot => {\n      return robot.name.toLowerCase().includes(searchfield.toLowerCase())\n    })\n\n    // in case the API loading takes a long time.\n    // Notice in the h1 element I use &hellip; to create a horizontal ellipsis.\n    if (!robots.length) {\n      return <h1>Loading&hellip;</h1>\n    } else {\n      return (\n        <div className='tc'>\n          <h1 className='f1'>RoboFriends</h1>\n          <SearchBox searchChange={this.onSearchChange} />\n          {/* created scroll component to keep the search box at the top of the screen as I scroll down the list. */}\n          <Scroll>\n            <CardList robots={filteredRobots} />\n          </Scroll>\n        </div>\n      )\n    }\n  }\n}\n\nexport default App\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './containers/App'\n// import CardList from './CardList'\nimport registerServiceWorker from './registerServiceWorker'\nimport 'tachyons'\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n)\n\nregisterServiceWorker()\n"],"sourceRoot":""}